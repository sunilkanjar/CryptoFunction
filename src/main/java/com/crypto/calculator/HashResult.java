package com.crypto.calculator;

/**
 * Implementation of {@code HashResult} class is under {@code Number} class
 *
 * @author Sunil Kanjar
 */
class HashResult {

	/**
	 * Hash value in {@code long} form
	 */
	long value;

	/**
	 * Length of algorithm
	 */
	int length;

	/**
	 * Create {@code HashResult} object with hash value and length of algorithm
	 *
	 * @param value hash value generated by {@code Checksum} type
	 * @param length length for check sum result
	 */
	HashResult(long value, int length) {
		this.value = value;
		this.length = length;
	}

	/**
	 * Convert {@code long} to {@code int} for 32 bit hash and return that
	 *
	 * @return Integer value
	 */
	public int intValue() {
		return (int) value;
	}

	/**
	 * Return long value for 64 bit hash
	 *
	 * @return Long value
	 */
	public long longValue() {
		return value;
	}

	/**
	 * Convert {@code long} to {@code byte} for 8 bit hash and return that
	 *
	 * @return Byte value
	 */
	public byte byteValue() {
		return (byte) intValue();
	}

	/**
	 * Convert {@code long} to {@code short} 16 bit hash and return that
	 *
	 * @return Short value
	 */
	public short shortValue() {
		return (short) intValue();
	}

	/**
	 * Returns the {@code Number} for respected length of hash
	 *
	 * @return Hash in respected data type
	 */
	public Number getValue() {
		if (length > 0 && length <= 8) {
			return byteValue();
		} else if (length > 8 && length <= 16) {
			return shortValue();
		} else if (length > 16 && length <= 32) {
			return intValue();
		} else {
			return longValue();
		}
	}
}
